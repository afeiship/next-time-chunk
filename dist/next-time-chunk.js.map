{"version":3,"sources":["next-time-chunk.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-time-chunk.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var nxChunk = nx.chunk || require('@feizheng/next-chunk');\n  var DEFAULT_OPTIONS = { chunk: 10, interval: 100, callback: nx.noop };\n\n  nx.timeChunk = function (inItems, inOptions) {\n    var options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n    var dataChunks = nxChunk(inItems, options.chunk);\n    var result = [];\n    var timer = null;\n    var done = false;\n    var start = function () {\n      next(dataChunks.shift());\n    };\n\n    var next = function (items) {\n      var promises = items.map(function (item) { return options.callback(item); });\n      return Promise.all(promises).then(function (res) {\n        result = result.concat(res);\n        done = (dataChunks.length === 0);\n        !done && start();\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      try {\n        start();\n      } catch (err) {\n        reject(err);\n      }\n\n      timer = setInterval(function () {\n        if (done) {\n          clearInterval(timer)\n          resolve(result);\n        }\n      }, options.interval);\n    })\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = nx.timeChunk;\n  }\n})();\n"]}